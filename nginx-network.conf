events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Basic Settings für Netzwerk
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    
    # Gzip
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Security Headers für lokales Netzwerk
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' data: blob:; img-src 'self' data: blob:;" always;

    # Rate Limiting für Netzwerk
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;
    limit_req_zone $binary_remote_addr zone=uploads:10m rate=10r/m;

    # Haupt-Server für alle Netzwerk-IPs
    server {
        listen 80;
        server_name _;  # Akzeptiert alle Hostnamen
        root /usr/share/nginx/html;
        index index.html;

        # Security
        server_tokens off;

        # Frontend Static Files
        location / {
            try_files $uri $uri/ /index.html;
            
            # Cache für statische Assets
            location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2)$ {
                expires 1d;
                add_header Cache-Control "public, immutable";
            }
            
            # Spezielle Cache-Regeln für HTML
            location ~* \.(html)$ {
                expires 1h;
                add_header Cache-Control "public, must-revalidate";
            }
        }

        # API Proxy zu Backend
        location /api/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://scam-detector-api:8000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_request_buffering off;
            proxy_buffering off;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
            
            # CORS für lokales Netzwerk
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization";
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

        # Health Check Endpoint
        location /health {
            access_log off;
            proxy_pass http://scam-detector-api:8000/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # API-Dokumentation
        location /docs {
            proxy_pass http://scam-detector-api:8000/docs;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Upload-Endpoint mit speziellen Limits
        location /analyze {
            limit_req zone=uploads burst=3 nodelay;
            
            proxy_pass http://scam-detector-api:8000/analyze;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            proxy_request_buffering off;
            proxy_buffering off;
            proxy_read_timeout 600s;
            proxy_connect_timeout 75s;
        }

        # Status-Page für Monitoring
        location /status {
            return 200 "Scam Detector Network Status OK\nServer: $hostname\nTime: $time_iso8601\nClient IP: $remote_addr\n";
            add_header Content-Type text/plain;
        }

        # Favicon
        location /favicon.ico {
            access_log off;
            log_not_found off;
            expires 1y;
        }

        # Robots.txt für lokales Netzwerk
        location /robots.txt {
            return 200 "User-agent: *\nDisallow: /api/\nDisallow: /admin/\n";
            add_header Content-Type text/plain;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }

        # Nginx Status (für Monitoring)
        location /nginx-status {
            stub_status;
            allow 192.168.0.0/16;  # Nur lokales Netzwerk
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            deny all;
        }
    }

    # Optional: HTTPS Server für sicherere Verbindungen
    # Aktivieren Sie dies, wenn Sie SSL-Zertifikate haben
    # server {
    #     listen 443 ssl http2;
    #     server_name _;
    #     
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     
    #     ssl_session_cache shared:SSL:1m;
    #     ssl_session_timeout 5m;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    #     ssl_prefer_server_ciphers on;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     
    #     # Gleiche Konfiguration wie HTTP-Server
    #     root /usr/share/nginx/html;
    #     index index.html;
    #     
    #     # ... Standart-Konfiguration hier einfügen
    # }
    
    # HTTP zu HTTPS Redirect (wenn HTTPS aktiviert)
    # server {
    #     listen 80;
    #     server_name _;
    #     return 301 https://$host$request_uri;
    # }
}
